=====================================================================================
Docker란?
=====================================================================================
컨테이너라는 개념은 도커가 처음 만든 것이 아닙니다. 도커가 등장하기 이전에, 프로세스를 격리하는 방법으로 리눅스에서는 cgroups(control groups)와 namespace를 이용한 LXC(Linux container)가 있었고 FreeBSD에선 Jail, Solaris에서는 Solaris Zones이라는 기술이 있었습니다. 구글에서는 고오오급 기술자들이 직접 컨테이너 기술을 만들어 사용하였고 lmctfy(Let Me Contain That For You)라는 뭐라고 읽어야 할지 알 수 없는 오픈소스 컨테이너 기술을 공개했지만 성공하진 못함.도커는 LXC를 기반으로 시작해서 0.9버전에서는 자체적인 libcontainer 기술을 사용하였고 추후 runC기술에 합쳐졌습니다.
이미지는 컨테이너 실행에 필요한 파일과 설정값등을 포함하고 있는 것으로 상태값을 가지지 않고 변하지 않습니다(Immutable). 컨테이너는 이미지를 실행한 상태라고 볼 수 있고 추가되거나 변하는 값은 컨테이너에 저장됩니다. 같은 이미지에서 여러개의 컨테이너를 생성할 수 있고 컨테이너의 상태가 바뀌거나 컨테이너가 삭제되더라도 이미지는 변하지 않고 그대로 남아있습니다.
도커 이미지는 Public Registry: docker hub에 등록하거나 Private Registry: docker Registry 저장소, Local(Host) Registry 를 직접 만들어 관리할 수 있습니다. 
컨테이너, 오버레이 네트워크overlay network, 유니온 파일 시스템union file systems등 이미 존재하는 기술을 도커처럼 잘 조합하고 사용하기 쉽게 만든 것은 없었고 사용자들이 원하는 기능을 간단하지만 획기적인 아이디어로 구현하였습니다.
도커는 이런 문제를 해결하기 위해 레이어layer라는 개념을 사용하고 유니온 파일 시스템을 이용하여 여러개의 레이어를 하나의 파일시스템으로 사용할 수 있게 해줍니다. 
도커는 이미지를 만들기 위해 dockerfile이라는 파일에 자체 DSLDomain-specific language언어를 이용하여 이미지 생성 과정을 적습니다. 
도커는 리눅스 컨테이너 기술이므로 macOS나 windows에 설치할 경우 가상머신에 설치가 됩니다. 리눅스 컨테이너 말고 윈도우즈 컨테이너라는 것도 존재하지만 여기서는 다루지 않습니다. 도커를 맥이나 윈도우즈에 설치하려면 docker for mac 또는 docker for windows를 설치하면 됩니다. 
도커를 실행하는 명령어는 다음과 같습니다.

docker container run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]

다음은 자주 사용하는 옵션들입니다.

옵션		설명
-d		detached mode 흔히 말하는 백그라운드 모드
-p		호스트와 컨테이너의 포트를 연결 (포워딩)
-v		호스트와 컨테이너의 디렉토리를 연결 (마운트)
-e		컨테이너 내에서 사용할 환경변수 설정
–name	컨테이너 이름 설정
–rm		프로세스 종료시 컨테이너 자동 제거
-it		-i와 -t를 동시에 사용한 것으로 터미널 입력을 위한 옵션
–link		컨테이너 연결 [컨테이너명:별칭]

엄청나게 직관적인 옵션으로 몇번 실행해보면 자연스럽게 익숙해집니다.

//kubernetes == docker + Dockerfile + docker-compose + docker swarm + Plus alpha

=====================================================================================
설치상태 확인
=====================================================================================
docker --version
Docker version 19.03.8, build afacb8b7f0

mkbahk@srv161:~$ sudo systemctl status docker*
● docker.service - Docker Application Container Engine
   Loaded: loaded (/etc/systemd/system/docker.service; enabled; vendor preset: enabled)
  Drop-In: /etc/systemd/system/docker.service.d
           └─mount_propagation_flags.conf
   Active: active (running) since Sat 2022-06-04 15:03:11 KST; 20h ago
     Docs: http://docs.docker.com
 Main PID: 41779 (dockerd)
    Tasks: 108
   CGroup: /system.slice/docker.service
           ├─35736 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 54320 -container-ip 172.17.0.4 -container-port 5432
           ├─41779 /usr/bin/dockerd
           └─47091 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 8989 -container-ip 172.17.0.3 -container-port 80

=====================================================================================
Docker 핵심명령어
=====================================================================================
docker image pull/push
docker image ls (== docker images)
docker container ls (== docker container ps, docker ps), 
docker container ls -a
docker volume ls
docker network ls

docker container logs
docker container inspect

docker image rm(==docker rmi) //image 삭제
docker container rm (==docker rm)  //container 삭제
docker volume rm
docker network rm

docker image prune
docker container prune
docker volume prune
docker network prune
docker system prune -a  //system초기화, 기 수행중인 컨테이너 관련 멤버유지

=====================================================================================
Docker & Kubectl 명령어 연관성
=====================================================================================
kubectl --help
kubectl controls the Kubernetes cluster manager.

Find more information at: https://kubernetes.io/docs/reference/kubectl/overview/

Basic Commands (Beginner):
  run           Run a particular image on the cluster

Basic Commands (Intermediate):
  delete        Delete resources by filenames, stdin, resources and names, or by resources and label selector

Cluster Management Commands:
  top           Display Resource (CPU/Memory/Storage) usage.

Troubleshooting and Debugging Commands:
  describe      Show details of a specific resource or group of resources
  logs          Print the logs for a container in a pod
  attach        Attach to a running container
  exec          Execute a command in a container
  cp            Copy files and directories to and from containers.


Usage:
  kubectl [flags] [options]

Use "kubectl <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all commands).


=====================================================================================
프로그램 기동방법 3가지
=====================================================================================
1. Interactive: docker가 제공
2. Service(Daemon): docker, docker-compose, docker-swarm이 제공
3. Schedule job: kubernetes가 위 1, 2 + 제공

=====================================================================================
Docker 기초 명령어
=====================================================================================
docker pull kapacitor // docker hub에서 이미지 다운로드

//docker container run은 docker image(Public Registry==dockerhub, Private registry(NEXUS,...), Local(host)Registry)의 이미지를 다운/또는 수행하는 명령(docker pull + run)

docker  container run -it [id] /bin/bash   //새로 image를 수행시키고 콘솔에 접속함, exit로 빠져나오면 docker가 죽움, Ctrl+p, Ctrl+q 로 나오면 살려두고 운영체제로 빠져나올수있음다시접속하려면 docker attach명령 사용

docker  container run -d -p 8888:8888 kapacitor //데몬으로 기동시킬 때
docker  container exec kapacitor cat /etc/kapacitor/kapacitor.conf  //기 수행 중인 도커를 콘솔을 접속하지 않고 독커내 특정 명령어 수행
docker  container exec -it kapacktor bash   // 기 수행중인 도커의 콘솔을 연결하고자 할 때

docker  container run ubuntu:16.04.  //실행하고 붙임
docker  container run -it ubuntu:16.04 /bin/bash

기 수행 중인 도커에 특정한 명령을 수행
docker  container exec [OPTIONS] CONTAINER COMMAND [ARG...]
docker  container exec -it mysql /bin/bash

docker  container start [이름]  //수행중이지 않고, docker ps -a로 저장된 docker를 실행하고 콘솔연결하지 않음
docker  container attach [이름 또는 ID]  //여기서 exit하면 종료되므로 Ctrl-p, Ctrl+q로 나오면 살아있음

//데몬으로 기동
docker  container run -d --name ubuntu_test ubuntu /bin/bash -c "while true; do echo "still live"; sleep 100; done"
docker  container exec -it eb3b9e69b18d /bin/bash

//로컬 디렉토리 마운팅
docker  container run -it -v c:\/home/workspace ubuntu:18.04

docker  container run --rm -it ubuntu:16.04 /bin/bash
docker  container run -d -p 1234:6379 redis
docker  container ps [OPTIONS]

docker  container ps -a
docker  container stop [OPTIONS] CONTAINER [CONTAINER...]
docker  container rm [OPTIONS] CONTAINER [CONTAINER...]

docker  container rm -f $(docker ps -q -aq)  //현재 떠있는 모든 container를 강제로 한꺼번에 삭제하는 명령
docker  container run --rm -i busybox ping -c 5 flaskapp   //busybox를 기동시켜 특정 호스트로 ping친 결과를 return

docker  container rm -v $(docker ps -a -q -f status=exited)
docker images [OPTIONS] [REPOSITORY[:TAG]]

docker pull [OPTIONS] NAME[:TAG|@DIGEST]
docker pull ubuntu:14.04
docker image rm 
docker rmi [OPTIONS] IMAGE [IMAGE...]  //docker image 삭제

docker  container ps
docker  container logs ${WORDPRESS_CONTAINER_ID}
docker  container logs --tail 10 ${WORDPRESS_CONTAINER_ID}
docker  container logs -f ${WORDPRESS_CONTAINER_ID}

=====================================================================================
Docker 기초 실습
=====================================================================================
echo "Hello World" 
docker container run  busybox echo "Hello World"
docker container run -it ubuntu:latest each "Hello World"
docker container run -it ubuntu:latest cat /etc/lsb-release
docker container run -it ubuntu:latest bash
	cat /etc/lsb-release
	echo "Hello World"
	exit

docker container run -it centos:latest each "Hello World"
docker container run -it centos:latest cat /etc/centos-release
docker container run -ti centos:latest bash
	cat /etc/centos-release
	echo "Hello World"
	exit

docker container run -it busybox sh
	busybox
	busybox | head -n 10
 	busybox | grep ping

docker container run -it ubuntu:latest ping 8.8.8.8
docker container run -it centos:latest ping 8.8.8.8
docker container run -it busybox ping 8.8.8.8

docker container run -it ubuntu:latest bash
	apt update
	apt install iputils-ping
	ping 8.8.8.8
	exit

docker container run -it ubuntu:latest ping 8.8.8.8  //???

PS C:\Users\mkbah> docker container ls -a
CONTAINER ID   IMAGE             COMMAND                  CREATED             STATUS                         PORTS                     NAMES
c61fd94c8b29   ubuntu:latest     "ping 8.8.8.8"           18 seconds ago      Created                                                  modest_swirles
e9e99be2481c   ubuntu:latest     "bash"                   9 minutes ago       Exited (137) 2 minutes ago                               eager_mcnulty
e77a1c2e883e   busybox:latest    "ping 8.8.8.8"           10 minutes ago      Exited (0) 10 minutes ago                                friendly_nightingale

docker container run -it e9e99be2481c bash	//???

+docker exec -it e9e99be2481c bash bash 	//???
+docker start e9e99be2481c
docker exec e9e99be2481c ping 8.8.8.8

=====================================================================================
Docker Snapshot, Backup & Restore
=====================================================================================
docker commit e9e99be2481c mkbahk/ubuntuwithping
docker save mkbahk/ubuntuwithping:latest -o ubuntuwithping.docker.image

PS C:\Users\mkbah> docker container ls -a
CONTAINER ID   IMAGE                          COMMAND                  CREATED             STATUS                      PORTS                     NAMES
633a6c56dbc5   mkbahk/ubuntuwithping:latest   "ping 8.8.8.8"           21 seconds ago      Exited (0) 16 seconds ago                             inspiring_volhard

docker system prune -a

docker load -i .\ubuntuwithping.docker.image
docker container run -it mkbahk/ubuntuwithping:latest ping 8.8.8.8
docker rm 633a6c56dbc5
docker container ls

docker image ls

PS C:\Users\mkbah> docker image ls
REPOSITORY              TAG         IMAGE ID       CREATED          SIZE
mkbahk/ubuntuwithping   latest    4766280c184f   12 minutes ago   113MB
postgres                latest    5b21e2e86aab   6 days ago       376MB

docker rmi mkbahk/ubuntuwithping:latest

Docker export --> docker import
Docker save --> docker load

=====================================================================================
Public Registry 에 등록 push/pull
=====================================================================================
docker tag mkbahk/ubuntuwithping:latest docker.io/mkbahk/ubuntuwithping:1.9
docker login   //dockerhub.com 에 로그인해야 함. ]
docker push mkbahk/ubuntuwithping:latest
//dockerhub.com 의 자신의 ID에서 리스트 확인
docker pull mkbahk/ubuntuwithping:latest
docker container run -it mkbahk/ubuntuwithping:latest ping 8.8.8.8
Ctrl-c

docker container run mkbahk/ubuntuwithping:latest ping 8.8.8.8
Ctrl-c  // stop이 불가

docker container run hello-world
docker image lsPS C:\Users\mkbah> docker container ls
CONTAINER ID   IMAGE                          COMMAND                  CREATED          STATUS          PORTS                     NAMES
2a6dd1553358   mkbahk/ubuntuwithping:latest   "ping 8.8.8.8"           49 seconds ago   Up 48 seconds                             friendly_antonelli
5d30aff0cc02   postgres:latest                "docker-entrypoint.s…"   2 hours ago      Up 2 hours      0.0.0.0:49153->5432/tcp   postgres-Hr9o
PS C:\Users\mkbah> docker stop 2a6dd1553358
2a6dd1553358

//이미지가 없으면 로컬시스템repository에서 찻고, 없으면 Local Repository, 없으면 Public Repository(dockerhub.com)에서 찾아서, 다운로드하고, 실행시키는 명령
docker container run -it mkbahk/ubuntuwithping:latest ping 8.8.8.8

=====================================================================================
Docker상에 S/W 개발환경 구성
=====================================================================================
//postgresql 설치

docker container run -d -p 54320:5432 -e POSTGRES_PASSWORD=posgrespw --name postgres postgres:latest 
psql -h localhost -U postgres -w

외부에서 DBeaver를 통해서 접속합니다.
Connection String: postgres://postgres:postgrespw@localhost:49153

CREATE TABLE public.HelloTable (
	id 		int PRIMARY KEY NOT NULL,
	name	text NOT NULL,
	age		int NOT NULL,
	address char(50),
	salary	REAL
);

select * from public.HelloTable;

insert into public.HelloTable (id, name, age ) values 
	(3, 'Bahk, Sang-Bong', 80),
	(2, 'Bahk, Kee-Berm', 20),
	(1, 'Bahk, Moon-Kee', 50);

select * from public.HelloTable;

drop table public.HelloTable;

//zeppelin
docker container run -d -p 8787:8080 --link postgres:postgres --name zeppelin zeppelin:0.10.1
 


//mysql 설치 및 서비스 수행, 암호없이 접속 + wordpress 설치 및 mysql와 연결
docker container run -p 3306(바깥쪽):3306(안쪽) --name mysql -d mysql:
docker container ps

PS C:\Users\mkbah> docker container ls
CONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS          PORTS                               NAMES
c9eff902ddbb   mysql:latest      "docker-entrypoint.s…"   21 minutes ago   Up 21 minutes   0.0.0.0:3306->3306/tcp, 33060/tcp   mysql
5d30aff0cc02   postgres:latest   "docker-entrypoint.s…"   5 hours ago      Up 5 hours      0.0.0.0:49153->5432/tcp             postgres-Hr9o
PS C:\Users\mkbah>

docker logs c9eff902ddbb

docker container run -d -p 3306:3306 -e MYSQL_ALLOW_EMPTY_PASSWORD=true --name mysql mysql:latest
docker exec -it mysql bash
	mysql -u root -p
	Enter  //password가 없습니다.
	show databases;
	use mysql;
	show tables;
	select * from user;
	exit
	exit

//wordpress를 위한 mysql 설치
docker container run -d --name mysql -v mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=wordpress -e MYSQL_DATABASE=wordpress -e MYSQL_USER=wordpress -e MYSQL_PASSWORD=wordpress mysql:5.7


//wordpress 설치 및 mysql 연결
docker container run -d --name wordpress --link mysql:mysql -v wordpress:/var/www/html -e WORDPRESS_DB_HOST=mysql:3306 -e WORDPRESS_DB_USER=wordpress -e WORDPRESS_DB_PASSWORD=wordpress -p 8989:80 wordpress:latest

=====================================================================================
Docker Container와 Host간의 파일 교환
=====================================================================================
//파일 Upload, Download
//host -> Container
docker cp .\dvdrental.zip postgres-Hr9o:/dvdrental.zip
docker cp .\dvdrental.zip postgres-Hr9o:/tmp/dvdrental.zip

docker exec -it postgres-Hr9o bash
	cd /tmp
	ls -al

//container -> host 
docker cp postgres-Hr9o:/tmp/dvdrental.zip   .\dvdrental-co.zip 
dir

=====================================================================================
docker volume으로 마운트
=====================================================================================
//docker에 Volume Mount
docker volume create hostvol
docker volume ls
docker volume inspect hostvol

root@srv161:~# sudo ls -al /var/lib/docker/volumes
total 76
drwx------ 11 root root  4096  6월  4 18:46 .
drwx--x--x 14 root root  4096  6월  4 15:03 ..
drwxr-xr-x  3 root root  4096  6월  4 17:16 49006234c749e913038abd2944d5c0f86e7afd10f7307090146ca66a4fca7068
drwxr-xr-x  3 root root  4096  6월  4 17:16 6043736fd514fe72222593c1b13bde271af77d82ed924c47eef9b4d1e29ce6e6
drwxr-xr-x  3 root root  4096  6월  4 18:19 8bc53954fc3d784aa7c6af200ca71791c80cf961c3c8907cc5bdf2114a1d3a00
drwxr-xr-x  3 root root  4096  6월  4 18:21 a4e13aa9d83c119e8538632a1cd80d248f8ef570c2a0de04cf6486f841c2a190
drwxr-xr-x  3 root root  4096  6월  4 18:18 aedf123be47bbc0e3fc02615535d0993790e311ff1720929268b5f968ac5ced9
drwxr-xr-x  3 root root  4096  6월  4 18:46 hostvol
-rw-------  1 root root 65536  6월  4 18:46 metadata.db
drwxr-xr-x  3 root root  4096  6월  4 14:42 mysql
drwxrwxrwx  3 root root  4096  6월  4 18:39 pgdata
drwxr-xr-x  3 root root  4096  6월  4 14:44 wordpress

docker container run -it -v hostvol:/mnt/hostvol --name ubuntu00 ubuntu:18.04 bash
	cd /mnt/hostvol
	echo "Created by ubuntu00" >> ubuntu00.txt
	ls -al
	
docker container run -it -v hostvol:/mnt/hostvol --name ubuntu01 ubuntu:18.04 bash
	cd /mnt/hostvol
	echo "Created by ubuntu01" >> ubuntu01.txt
	ls -al

//NFS Volume attach
docker volume create --driver local --opt type=nfs --opt o=addr=218.145.56.74,rw --opt device=:/localdata/nfs_kube nfsvol
docker volume ls
docker volume inspect nfsvol

docker container run -it -v nvfvol:/mnt/nfsvol --name ubuntu00 ubuntu:18.04 bash
	cd /mnt/nfsvol
	echo "Created by ubuntu00" >> ubuntu00-nfs.txt
	ls -al
	
docker container run -it -v nfsvol:/mnt/nvfvol --name ubuntu01 ubuntu:18.04 bash
	cd /mnt/nfsvol
	echo "Created by ubuntu01" >> ubuntu01-nfs.txt
	ls -al

=====================================================================================
docker container에 특정 Device 마운트
=====================================================================================
//docker가 HOST의 특정 장치를 사용하도록 하는 명령
docker run --rm --gpus all nvidia/cuda:10.0-devel-ubuntu18.04 nvidia-smi

NV_GPU=0,1 nvidia-docker run -it nvcr.io/nvidia/tensorflow:20.12-tf1-py3
docker run -it --runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=2,3 nvcr.io/nvidia/tensorflow:20.12-tf1-py3
docker run -it --gpus '"device=0,1,2,3"' nvcr.io/nvidia/tensorflow:20.12-tf1-py3

docker run --device=/dev/ipu0:/dev/ipu0 --device=/dev/ipu0_ex:/dev/ipu0_ex --device=/dev/ipu0_mailbox:/dev/ipu0_mailbox --device=/dev/ipu0_mem:/dev/ipu0_mem -ti graphcore/tools gc-inventory
gc-docker --device-id 0 -- -ti graphcore/tools gc-inventory

=====================================================================================
docker Network
=====================================================================================

mkbahk@srv161:~$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
64e80fa4479d        bridge              bridge              local
4b176f181bbe        host                host                local
eaaaae84e98b        none                null                local
mkbahk@srv161:~$ docker network inspect 64e80fa4479d
[
    {
        "Name": "bridge",
        "Id": "64e80fa4479d51da3e9aedb79641a90e2e39b617218f17605f06506332f23ea6",
        "Created": "2022-06-04T15:03:11.399057009+09:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.17.0.0/16",
                    "Gateway": "172.17.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "1c23d0c7e4dab5f889a67cee5b0d22ea1008de997f6d26c550bb47c67453b0ba": {
                "Name": "mysql",
                "EndpointID": "ce2195bcc525c3c6761577990e6110b8b9c7733d26cc123a9d069d700e6e40b6",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            },
            "2f3348856598ef4ebfea80acb4d3aec351d34ddb21ebf89bf93787e37ea23b1e": {
                "Name": "postgres",
                "EndpointID": "60e2146aaff522542fbd3b138236d6edcf48baefac325b5a50747792755f959d",
                "MacAddress": "02:42:ac:11:00:04",
                "IPv4Address": "172.17.0.4/16",
                "IPv6Address": ""
            },
            "c8496394df37706f1708e03bd5bfd7418673a2c0b6d7819a5e8fbb4f8352c79b": {
                "Name": "wordpress",
                "EndpointID": "64b59e31d0f4e5215a249928078ecafe1bbf8d324a99d08b21a6c5fbd61fa36e",
                "MacAddress": "02:42:ac:11:00:03",
                "IPv4Address": "172.17.0.3/16",
                "IPv6Address": ""
            }
        },
        "Options": {
            "com.docker.network.bridge.default_bridge": "true",
            "com.docker.network.bridge.enable_icc": "true",
            "com.docker.network.bridge.enable_ip_masquerade": "true",
            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
            "com.docker.network.bridge.name": "docker0",
            "com.docker.network.driver.mtu": "1500"
        },
        "Labels": {}
    }
]


docker network create ubuntu-network
docker network ls
docker network inspect ubuntu-network

//터미널 창을 2개 여세요. 각각의 창에
창1: 
docker container run --rm -it --name ubuntu01 --network ubuntu-network ubuntu:18.04 bash

창2:
docker container run --rm -it --name ubuntu02 --network ubuntu-network ubuntu:18.04 bash

//두개의 ubuntu:18.04 컨테이너에 아래 명령들을 수행해 ip관련 툴들을 설치합니다.

	apt update -y
	apt install iputils-ping -y   	//ping 툴 설치
	apt install net-tools -y 		//ifconfig 툴 설치
	apt install iproute2 -y 		// ip commands 들 설치

각각의 창에서
	ifconfig
	ip a
	ip route
	netstat -nltp
	netstat --route
	ping ubuntu01
	ping ubuntu02
	ping ubuntu01.ubuntu-network
	ping ubuntu02.ubuntu-network

//창3 새로 여세요
docker container run --rm -it --name ubuntu03 ubuntu:18.04 bash
	apt update -y
	apt install iputils-ping -y   	
	apt install net-tools -y 		
	apt install iproute2 -y 		
	ifconfig

docker network connect ubuntu-network ubuntu03

//ubuntu03 container 내부에서
	ping ubuntu01
	ping ubuntu02


//HOST창에서
docker network disconnect bridge ubuntu03

//ubuntu03 창에서
ifconfig

=====================================================================================
Dockerfile
=====================================================================================
https://javacan.tistory.com/entry/docker-start-7-create-image-using-dockerfile

mkbahk@host207-ipusrv16:~$ cat Dockerfile
FROM mkbahk/gc_p20tf21_mnist_ipu:latest
ENTRYPOINT ["python3", "/graphcore-ipu-demo/mnist-cnn/mnist-cnn-keras-functional-ipu-dist.py"]

docker build --tag mkbahk/gc_p20tf21_mnist_ipu_autorun:2.0 .

docker push mkbahk/gc_p20tf21_mnist_ipu_autorun:2.0



cd
mkdir -p prj-docfile-SmartCar

vi Dockerfile

docker run -it --name SmartCar ubuntu:18.04 bash

apt update -y
apt install iputils-ping -y   	
apt install net-tools -y 		
apt install iproute2 -y  
apt install curl wget nano -y

apt install software-properties-common -y
add-apt-repository ppa:deadsnakes/ppa -y
apt update -y
apt install python3.8 -y
apt install python3-pip -y
pip3 install -U pip -q
pip3 install tensorflow==2.6.2 -q
pip3 install keras -q
pip3 install pandas -q
pip3 install matplotlib -q
pip3 install sklearn -q
pip3 install flask -q

apt install git -y
cd /root
git clone https://github.com/mkbahk/IPULearning -q
cd /root/IPULearning/SmartCar/
python3 smartcar_dnn_model.py



=====================================================================================
Docker-compose
=====================================================================================
//docker-compose 설치
sudo curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version
cd /usr/bin
ls -s /usr/local/bin/docker-compose docker-compose

docker-compose --version
	docker-compose version 1.29.2, build 5becea4c

=====================================================================================

mkdir -p ./prj-doccomp-mysql-phpadmin-wordpress
cd  prj-doccomp-mysql-phpadmin-wordpress/

vi docker-compose.yaml

version: '3'

services:
  # Database
  db:
    image: mysql:5.7
    volumes:
      - ./db_data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
    networks:
      - wpsite-network
  # phpmyadmin
  phpmyadmin:
    depends_on:
      - db
    image: phpmyadmin/phpmyadmin
    restart: always
    ports:
      - '8181:80'
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: password
    networks:
      - wpsite-network
  # Wordpress
  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    ports:
      - '8282:80'
    restart: always
    volumes: ['./wp:/var/www/html']
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
    networks:
      - wpsite-network
networks:
  wpsite-network:
volumes:
  db_data:


docker-compose up -d
docker-compose ps
docker container ls


http://ip_address:8282/
  docker learing blog
  admin
  admin
  V약한 비밀번호 사용 확인
  admin@helloworld.net

http://ip_address:8181/
  wordpress
  wordpress

docker-compose down
cd


=====================================================================================
Docker-compose scale
=====================================================================================
mkdir -p ./prj-doccomp-nginx-scale
cd ./prj-doccomp-nginx-scale

vi docker-compose.yaml

version : "3"
services:
   web:
      image: "nginx:latest"
      ports:
         - "8380-8389:80"
      networks:
         - nginx-net
networks:
   nginx-net:

docker-compose up -d --scale web=10
docker-compose ps
docker container ls

http://ip_address:8380/
~
http://ip_address:8389/

docker-compose up -d --scale web=3
docker-compose down
cd

=====================================================================================
Docker swarm
=====================================================================================







